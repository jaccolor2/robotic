1.2 References
You can find the following references on the subject:
• POSIX standard:
• http://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_04_03
• man pages:
• http://man7.org/linux/man-pages/man3/memcmp.3p.html
• man pages:
• http://man7.org/linux/man-pages/man3/assert.3p.html
1.3 Source code
You can find the source code for this function in the second section.
1.4 Expected result
• Upon successful completion, the my_memcmp() function must return an integer less than, equal to,
or greater than zero, if the first num bytes of s1 are found to be less than, to match, or be greater
than the first num bytes of s2, respectively.
• If num is zero, my_memcmp() must return zero.
• Upon failure, these functions return the value (errno).
2. my_memcmp function


/************************************************************/
/************************************************************/

int my_memcmp(const void *s1, const void *s2, size_t num)
{
    while (num--)
    {
        if (*(unsigned char*)s1 != *(unsigned char*)s2)
            return (*(unsigned char*)s1 - *(unsigned char*)s2);
        s1++;
        s2++;
    }
    return (0);
}


/************************************************************/
/************************************************************/

3. Usage
You have to compile this function with the following command:
gcc -Wall -Wextra -Werror -ansi -pedantic my_memcmp.c
You can also use the Makefile included in this directory.
You can test your function with the following program:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
int main()
{
    char *s1 = "Hello World!";
    char *s2 = "Hello World!";
    char *s3 = "Hello world!";
    char *s4 = "Hello world!!";
    printf("%d\n", memcmp(s1, s2, strlen(s1)));
    printf("%d\n", memcmp(s1, s3, strlen(s1)));
    printf("%d\n", memcmp(s1, s4, strlen(s1)));
    printf("%d\n", memcmp(s1, s4, strlen(s4)));
    printf("%d\n", memcmp(s1, s3, strlen(s2)));
    return (0);
}
You should get the following output:
0
32
-1
-1
0